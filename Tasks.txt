PHASE 1: CORE STRUCTURE

[x] Set Up Database Models
[x] Configure Database Engine
[x] Add Templating (Jinja2)
[x] Add User Auth System
[x] Create Role-Based Access System

PHASE 2: DEVICE + VLAN MGMT

[x] Add Device List View
[x] Add Device Create/Edit/Delete
[x] Add VLAN Management Page
[x] Implement VLAN Derivation from IP
[x] Superadmin: SSH/SNMP Credential Management

PHASE 3: CONFIG BACKUP + LOGGING

[x] Pull Config via AsyncSSH
[x] Push Config via AsyncSSH
[x] Track Config Versions
[x] Implement Config Queue System
[x] Log Actions

PHASE 4: UI & TERMINAL

[x] Add Live Port Status via SNMP
[x] Add SSH Web Terminal (xterm.js + WebSocket)
[x] Auto-expire Sessions
[x] Add Config Push Templates
[x] Superadmin Debug Page

PHASE 5: THEME CLEANUP

[x] Audit templates for fixed colour classes and inline styles
[x] Replace colour utilities with theme-aware button classes
[x] Add or update theme rules for common colours
[x] Review templates across all themes for consistent layout

PHASE 6: CLOUD & MOBILE INTEGRATION

[x] Design architecture for cloud server with site-level replicas
[x] Implement record versioning and conflict resolution fields
  - [x] Add version columns to models and schemas
  - [x] Track unresolved conflicts in a dedicated field
  - [x] Generate Alembic migration scripts
[x] Add sync endpoints and background jobs for local/cloud replication
  - [x] POST `/api/v1/sync` to accept batched updates
  - [x] Background worker to push local changes
  - [x] Background worker to pull updates from cloud
[x] Provide configuration options for cloud vs. local deployment
  - [x] `ROLE` environment variable controls cloud or local behaviour
  - [x] Conditional startup of cloud sync components
[x] Expand mobile-client folder into functional app connecting to local servers
  - [x] Scaffold React Native project with authentication
  - [x] Implement device list view backed by REST API
[x] Supply Docker/Kubernetes configs for cloud and local roles
  - [x] `docker-compose.cloud.yml` for the central server
  - [x] Kubernetes manifests under `k8s/`
[x] Write tests for synchronization and mobile interactions
  - [x] Unit tests for sync worker and API endpoints
  - [x] Integration tests simulating mobile app requests
[x] Update README with setup instructions for cloud/local servers and mobile app
